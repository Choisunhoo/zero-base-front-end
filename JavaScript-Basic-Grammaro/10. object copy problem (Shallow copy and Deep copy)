// 객체 복사의 문제점 

let user_1 = {
    name: "john",
    age: 23,
};

// 객체 복사 이후에 admin 혹은 user_1 둘둥 하나의 key에 저장된 value만 바뀌어도 둘다 바뀜
let admin_1 = user_1; 

admin_1.name = "park"
console.log(admin_1.name);  // park
console.log(user_1.name);   // park

user_1.age = 30;
console.log(admin_1.age);  // 30
console.log(user_1.age);   // 30

/* object 복사 
   object의 값을 복사할 때는 대상 전체가 아닌 object 내 주소 값만 복사되는 문제 발생 
   가리키는 대상 전체를 복사하는 방법은 얕은 복사(Shallow copy), 깊은 복사(Deep copy)를 통해서 가능
*/

//얕은 복사(Shallow copy)
// 반복문을 통한 복사 
let user = {
    name: "john",
    age: 23,
};

let admin = {};

// shallow copy 
for (let key in user) {
    admin[key] = user[key];
}

admin.name = "park";

console.log(admin.name); // output: "park"
console.log(user.name); // output: "john"

// Object.assing() 함수를 이용한 복사 

let user_2 = {
    name: "john",
    age: 23,
};

let admin_2 = Object.assign({}, user);

admin_2.name = "park";
user_2.age = 30;

console.log(admin_2.name); // output: "park"
console.log(user_2.name); // output: "john"
console.log(admin_2.age); // output: 23
console.log(user_2.age); // output: 30

//ES6 부터 지원하는 전개 연산자 Spread Operator 를 이용한 복사 

let user_3 = {
    name: "john",
    age: 23,
};

let admin_3 = { ...user_3 };

admin_3.name = "park";
user_3.age = 30;

console.log(admin_3.name); // output: "park"
console.log(user_3.name); // output: "john"
console.log(admin_3.age); // output: 23
console.log(user_3.age); // output: 30

// 얕은 복사의 문제점: 객체 내에 또 다른 객체가 있으면 복사가 되지 않음
let user_4 = {
    name:"john",
    age: 23,
    sizes: {
        height: 180,
        weight: 72,
    },
};

let admin_4 = Object.assign({}, user_4);

admin_4.sizes.weight++;
--admin_4.sizes.height;

console.log(admin_4.sizes.weight); // 73
console.log(admin_4.sizes.height); // 179
console.log(user_4.sizes.weight); // 73
console.log(user_4.sizes.height); // 179


// 깊은 복사 (Deep copy)
// 반복문(재귀함수)
let user_5 = {
    name:"john",
    age: 23,
    sizes: {
        height: 180,
        weight: 72,
    },
};

function copyObj(obj) {
    let result = {};
    for (let key in obj) {
        if (typeof obj[key] === "object") result[key] = copyObj(obj[key]);
        else result[key] = obj[key];
    }
    return result;
}
let admin_5 = copyObj(user_5);

admin_5.sizes.weight++;

console.log(admin_5.sizes.weight); // 73
console.log(user_5.sizes.weight); // 72


// .JSON 객체를 이용한 깊은 복사, stringify는 객체를 문자열로 변환하는데 이때 원본 객체와의 참조가 끊김 
let user_6 = {
    name:"john",
    age: 23,
    sizes: {
        height: 180,
        weight: 72,
    },
};

// stringfy: js object > string, parse: string > js object
let admin_6 = JSON.parse(JSON.stringify(user));

admin_6.sizes.weight++;
--admin_6.sizes.height;

console.log(admin_6.sizes.weight); // 73
console.log(admin_6.sizes.height); // 179
console.log(user_6.sizes.weight); // 72
console.log(user_6.sizes.height); // 180
