* linguist-vendored
*.javascript linguist-vendored=false

/* 원형 연결 리스트 (Circular Linked List)
각 노드가 데이터와 포인터를 가지며, 원형 형태로 연결되어 있는 방식으로 데이터를 저장하는 자료 구조
구현 메서드 (method)
- 노드 개수 / 비어 있는지 확인 : CircularLinkedList.size(), CircularLinkedList.isEmpty()
- 노드 추가: CircularLinkedList.append(), CircularLinkedList.insert()
- 노드 삭제: CircularLinkedList.remove(), CircularLinkedList.removeAt()
- 데이터 위치 확인/ 노드 출력: CircularLinkedList.indexOf(), CircularLinkedList.printNode()
*/

// 원형 연결리스트 구현(1)

// Node(): data와 point를 가지고 있는 객체 
function Node(data) {
  this.data = data;
  this.next = null;
}

// LinkedList(): head와 length를 가지고 있는 객체
function CircularLinkedList() {
  this.head = null;
  this.length = 0;
}

// size(): 연결 리스트 내 노드 개수 확인 
CircularLinkedList.prototype.size = function () {
  return this.length;
};

// isEmpty(): 객체 내 노드 존재 여부 파악 
CircularLinkedList.prototype.isEmpty = function () {
  return this.length === 0;
};

/* Test code */
let cll = new CircularLinkedList();
let node; 
console.log(cll);

node = new Node(123);
cll.head = node;
node.next = cll.head;
cll.length++;
console.log(cll);

node = new Node(456);
node.next = cll.head.next;
cll.head.next = node;
cll.length++;
console.log(cll);
