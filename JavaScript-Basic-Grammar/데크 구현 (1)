/* 데크 (Deque)
    Double - Ended Queue의 약자로, 삽입과 삭제가 양쪽 끝에서 모두 발생할 수 있는 선형 자료 구조
    구현 메서드 (method)
    데이터 전체 획득 / 비어있는지 확인: Deque.getBuffer(), Deque.isEmpty()
    데이터 추가 / 삭제: Deque.pushFront(), Deque.popFront(), Deque.pushBack(), Deque.popBack()
    첫번째 & 끝 데이터 반환 / 사이즈 / 전체 삭제: Deque.front(), Deque.back(), Deque.size(), Deque.clear() 
*/

// 데크 구현(1)

// Deque(): 초기 속성값 설정을 위한 생성자 함수 
function Deque(array = []) {
    this.array = array;
};

// getBuffer(): 객체 내 데이터 셋 반환 
Deque.prototype.getBuffer = function() {
    return this.array.slice();
};

// isEmpty(): 데이터 비어 있는지 확인 
Deque.prototype.isEmpty =  function () {
    return this.array.length == 0;
};

let dq = new Deque([1, 2, 3]);
console.log(dq);  // Deque { array: [ 1, 2, 3 ] }

let data = dq.getBuffer();
console.log(data === dq.array); // false
console.log(data); // [ 1, 2, 3 ]

console.log(dq.isEmpty()); // false

console.log(Object.getOwnPropertyDescriptors(Deque.prototype))
