/* 큐 만들기 */ 

function Queue() {
    this.array = [];
}

Queue.prototype.enqueue = function(element) {
    this.array.push(element);
};

Queue.prototype.dequeue = function() {
    let ret = this.array.shift();
    return ret === undefined ? -1 : ret;
};

Queue.prototype.size = function () {
    return this.array.length;
};

Queue.prototype.empty = function () {
    return this.array.length === 0 ? 1 : 0;
};

Queue.prototype.front = function () {
    return this.array.length === 0 ? -1 : this.array[0];
};

Queue.prototype.back = function () {
    return this.array.length === 0 ? -1 : this.array[this.array.length - 1];
};


function answer(cmds) {
    let result = [];
    let queue = new Queue();

    for (let i = 0; i < cmds.length; i++) {
        let cmd = cmds[i].split(" ")[0];

        switch (cmd) {
            case "enqueue":
                queue.enqueue(Number(cmds[i].split(" ")[1]));
                break;
            case "dequeue":
                result.push(queue.dequeue());
                break;
            case "size":
                result.push(queue.size());
                break;
            case "empty":
                result.push(queue.empty());
                break;
            case "front":
                result.push(queue.front());
                break;
            case "back":
                result.push(queue.back());
                break;                
        }
    }

    return result;
}


let input = [
    ["enqueue 1", "enqueue 2", "dequeue", "dequeue", "dequeue"],
]

for (let i = 0; i < input.length; i++) {
    process.stdout.write(`#${i + 1} `);
    console.log(answer(input[i]));
}
