/* 배열 (Array)
    여러 개체 (Entity)값을 순차적으로 나열한 선형 자료 구조 
    대표 속성 (property)과 메서드(method)
    -배열 크기 및 배열 여부 확인: Array.length, Array.isArray()
    -배열 추가/삭제: Array.push(), Array.pop(), Array.shift(), Array.unshift(), Array.splice(), Array.slice() 등
    -배열 탐색: Array.indexOf(), Array.lastIndexOf(), Array.includes()
    -배열 변형: Array.sort(), Array.reverse(), Array.join()
    -배열 반복: Array.sort(), Array.forEach(), Array.Map(), Array.find(), Array.filter(), Array.reduce()
    -배열 논리연산: Array.some(), Array.every()
*/


/* 배열 선언/ 접근/속성 
   선언: "new Array()" 혹은 "[]"를 통해 선언하며, 사이즈 혹은 값을 입력하여 초기화도 가능
   접근 방법: "Array[index]"를 통해 index를 통해서 O(1) 접근
   배열 속성: "Array.length"를 통해 배열 요소의 개수 확인 가능 
*/

let arr_1 = new Array(10);
let arr_2 = [];

console.log(arr_1); // output: [ <10 empty items> ]
console.log(arr_2); // output: []

let fruits = ["apple", "orange", "melon"];
console.log(fruits); // output: [ 'apple', 'orange', 'melon' ]
console.log(fruits.length); // output: 3
console.log(fruits[0]); // output: apple
console.log(fruits[1]); // output: orange
console.log(fruits[2]); // output: melon

fruits[1] = "kiwi";
console.log(fruits); // output: [ 'apple', 'kiwi', 'melon' ]


/* 배열의 실체 
   자바스크립트에서 배열은 다른 언어에서 말하는 일반적인 배열이 아닌 Hash 기반의 객체 
   메모리가 연속적인 밀집 배열(dense array)가 아닌 비 연속적인 희소 배열(sparse array)
*/

let nums = [];

nums.push("one");
nums.push("two");
console.log(nums.length); // output: 2
console.log(nums); // output: [ 'one', 'two' ]

nums["once"] = "once";
nums["twice"] = "twice";
console.log(nums.lengths); // output: 2
console.log(nums); // output: [ 'one', 'two', once: 'once', twice: 'twice' ]

console.log(Object.getOwnPropertyDescriptors(nums));  
/*output: {
  '0': {
    value: 'one',
    writable: true,
    enumerable: true,
    configurable: true
  },
  '1': {
    value: 'two',
    writable: true,
    enumerable: true,
    configurable: true
  },
  length: { value: 2, writable: true, enumerable: false, configurable: false },
  once: {
    value: 'once',
    writable: true,
    enumerable: true,
    configurable: true
  },
  twice: {
    value: 'twice',
    writable: true,
    enumerable: true,
    configurable: true
  }
}

*/

// 배열 타입 확인 및 요소 삭제 

/* 배열 타입 확인 
   배열 타입 확인 방법: Array.isArray(value)
*/

let num_1 = 123.456;
let str = "Here I am!";
let fruits_1 = ["apple", "orange", "melon"];

console.log(Array.isArray(num_1)); // output: false
console.log(Array.isArray(str)); // output: false
console.log(Array.isArray(fruits_1)); // output: true

/* 배열 요소 삭제
   배열 일부 요소 삭제: delete array[index] (삭제해도 배열 사이즈가 그대로인 문제점)
*/

let fruits_2 = ["apple", "orange", "melon"];

console.log(fruits_2); // output: ['apple', 'orange', 'melon']
console.log(fruits_2.length); // output: 3

delete fruits_2[1];
console.log(fruits_2); // output: [ 'apple', <1 empty item>, 'melon' ]
console.log(fruits_2.length); // output: 3



// 배열 조작 - (1)

/* 배열 추가/삭제 (LIFO - Back)
   배열 추가: Array.push(element), 배열 삭제: Array.pop()
*/

let fruits_3 = ["apple", "orange", "melon"];

ret = fruits_3.push("watermelon");
console.log(fruits_3); // output: [ 'apple', 'orange', 'melon', 'watermelon' ]
console.log(ret); // output: 4
ret = fruits_3.pop()
console.log(fruits_3)// output: [ 'apple', 'orange', 'melon' ]
console.log(ret); // output: watermelon


/* 배열 추가/삭제 (LIFO - Front)
   배열 추가: Array.unshift(element), 배열 삭제: Array.shift()
*/

let fruits_4 = ["apple", "orange", "melon"];

ret_1 = fruits_4.shift()
console.log(fruits_4); // output: ["orange", "melon"];
console.log(ret); // output: apple
ret = fruits_4.unshift("watermelon");
console.log(fruits_4); // output: ["watermelon", "orange", "melon"];
console.log(ret); // output: 3


// 배열 조작 - (2)

/* 배열 삭제/ 변경 (index)
   배열 요소 삭제/변경: Array.splice(index[, deleteCount, elem1, ...,elemN])
*/

let fruits_5 =  ["apple", "orange", "melon"];
console.log(fruits_5.splice(1)); // output: ['orange', 'melon']
console.log(fruits_5); // output: ['apple']


fruits_5 =  ["apple", "orange", "melon", "strawberry"];
console.log(fruits_5.splice(1, 1)); // output: ['orange']
console.log(fruits_5); // output: [ 'apple', 'orange', 'melon', 'strawberry' ]

console.log(fruits_5.splice(1, 1, "mango", "kiwi")); // output: [ 'melon' ]
console.log(fruits_5); // output: [ 'apple', 'mango', 'kiwi', 'melon', 'strawberry' ]


// 배열 조작 - (3)

/* 배열 삭제 (index)
   배열 요소 삭제: Array.slice([start], [end])
*/

let fruits_6 =  ["apple", "orange", "melon"];

console.log(fruits_6.slice(1)); // output: [ 'orange', 'melon' ]
console.log(fruits_6); // output: [ 'apple', 'orange', 'melon' ]

console.log(fruits_6.slice(1, 2)); // output: [ 'orange' ]
console.log(fruits_6.slice(-2)); // output: [ 'orange', 'melon' ]

/* 배열 병합 
   다중 배열 병합: Array.concat(arg1, arg2...)
*/

let fruits_7 = ["apple", "orange", "melon"];

console.log(fruits_7.concat("strawberry")); // output:  [ 'apple', 'orange', 'melon', 'strawberry' ]
console.log(fruits_7.concat(["cherry", "banana"])); // output:  [ 'apple', 'orange', 'melon', 'cherry', 'banana' ]
console.log(fruits_7.concat(["cherry", "banana"], "mango")); // output:  [ 'apple', 'orange', 'melon', 'cherry', 'banana', 'mango' ]


/* 배열 반복문
   다양한 반복문 문법을 통해 배열 요소에 접근 가능 
   반복문 문법: for ... length(index 접근), for ... of(element 접근), for ... in (key 접근)
*/


let fruits_8 = ["apple", "orange", "melon"];

// 1. use for (index)
// output: apple, orange, melon
for (let i = 0; i < fruits_8.length; i++) {
    console.log(fruits_8[i]);
}


// 2. use for ...(element) of 
// output: apple, orange, melon

for (let fruit of fruits_8) {
    console.log(fruit);
}

// 3. use for ...(key) of 
// output: apple, orange, melon

for (let key in fruits_8) {
    console.log(fruits_8[key]);
}


/* 배열 탐색
   index 탐색(앞에서부터): Array.indexOf(item, from)
   index 탐색(뒤에서부터): Array.lastIndexOf(item, from)
   값 포함 여부 확인: Array.includes(item, from)
*/

let fruits_9 =  ["apple", "orange", "banana", "orange", "melon"];

console.log(fruits_9.indexOf("orange")); // output: 1
console.log(fruits_9.indexOf("Orange")); // output: -1
console.log(fruits_9.indexOf("orange", 2)); // output: 3

console.log(fruits_9.lastIndexOf("orange")); // output: 3
console.log(fruits_9.lastIndexOf("orange", -3)); // output: 1
console.log(fruits_9.lastIndexOf("orange", 0)); // output: -1

console.log(fruits_9.includes("banana")); // output: true
console.log(fruits_9.includes("Banana")); // output: false
console.log(fruits_9.includes(0)); // output: false


/* 배열 변형
   배열 정렬/ 반전
   배열 정렬: Array.sort(), 배열 반전: Array.reverse()
*/

let nums_1 = [1, -1, 4, 5, 2, 0];
console.log(nums_1.sort()); // output: [ -1, 0, 1, 2, 4, 5 ]
console.log(nums_1.reverse()); // output: [ 5, 4, 2, 1, 0, -1 ]

let fruits_10 = ["apple", "orange", "banana", "melon"];
console.log(fruits_10.sort()); // output: [ 'apple', 'banana', 'melon', 'orange' ]
console.log(fruits_10.reverse()); // output: [ 'orange', 'melon', 'banana', 'apple' ]


/* 
   배열 변환
   배열 값을 문자열로 변환: Array.join(separator)
*/

let fruits_11 = ["apple", "orange", "banana", "melon"];
let str_1 = fruits_11.join();
console.log(str_1); // output: apple,orange,banana,melon

let str_separator = fruits_11.join(";");
console.log(str_separator); // output: apple;orange;banana;melon
let result = str_separator.split(";")
console.log(result); // output: [ 'apple', 'orange', 'banana', 'melon' ]


// sort() 함수의 매개변수로 함수를 넣어 고차함수를 이용한 정렬 수행 가능 

nums_2 = [1, -1, 4, 0, 10, 20, 12];

let ascending_order = function (x, y) { return x - y };
let descending_order = function (x, y) { return y - x };

console.log(nums_2.sort(ascending_order)) // output: [ -1,  0,  1, 4, 10, 12, 20 ]
console.log(nums_2.sort(descending_order)) // output: [ 20, 12, 10, 4, 1,  0, -1]


/* forEach()
    배열 요소 별 콜백 함수 각각에 실행: Array.forEach(function(item, index, array){})
    item: 배열 요소, index: 배열 위치, array: 배열
*/

// use for loop
// output: 1 2 3
let nums_3 = [1, 2, 3];
for (let i = 0; i < nums_3.length; i++) {
    console.log(nums_3[i]);
}

// use forEach
// output: 1 2 3
nums_3.forEach(function(i){
    console.log(i);
});


/* find()
    콜백 함수의 조건을 만족하는, 단 하나의 값만 반환: Array.find(function(item, index, array){})
    item: 배열 요소, index: 배열 위치, array: 배열
*/

let users = [
    {name: "bob" , age: 17, job: false},
    {name: "alice" , age: 20, job: false},
    {name: "john" , age: 27, job: true},
];

let find_job = users.find(function (user) {
    return user.job == false;
});
console.log(find_job); // output: { name: 'bob', age: 17, job: false }

let find_age = users.find(function (user) {
    return user.age > 19;
});

console.log(find_age);
//output: { name: 'alice', age: 20, job: false }

/* filter()
    콜백 함수의 조건을 만족하는 값을 배열로 반환: Array.find(function(item, index, array){})
    item: 배열 요소, index: 배열 위치, array: 배열
*/

let filter_job = users.filter(function(user){
    return user.job == false;
});
console.log(filter_job); // output: [{ name: 'bob', age: 17, job: false }, { name: 'alice', age: 20, job: false }]


let filter_age = users.filter(function (user) {
    return user.age > 19;
});
console.log(filter_age); // output: [ { name: 'alice', age: 20, job: false }, { name: 'john', age: 27, job: true }]



/* some()
    배열 내 하나의 요소라도 콜백 함수의 조건을 만족한다면 true, 아니면 false 반환 (빈 배열인 경우 true)
    Array.some(function(item, index, array){}), item: 배열 요소, index: 배열 위치, array: 배열
*/

let some_job = users.every(function (user){
    return user.job == false;
});
console.log(some_job); // output: true

let some_age = users.every(function (user){
    return user.age > 16;
});
console.log(some_age); // output: false

let empty = [].some((item) => item > 16);
console.log(empty); // output: false


/* every()
    배열 내 모든 요소가 콜백 함수의 조건을 만족한다면 true, 아니면 false 반환 (빈 배열인 경우 true)
    Array.every(function(item, index, array){}), item: 배열 요소, index: 배열 위치, array: 배열
*/

let every_job = users.every(function (user){
    return user.job == false;
});
console.log(every_job); // output: false

let every_age = users.every(function (user){
    return user.age > 16;
});
console.log(every_age); // output: true

let empty_1 =  [].every((item) => item > 16);
console.log(empty_1); // output: true

// 2차원 배열 예제 
// 2차원 배열은 array[N][M]으로 접근하며, 배열(Array) 전체를 push(), pop() 가능 

let array = [
    [101, 102, 103],
    [201, 202, 203],
    [301, 302, 303],
  ];
  
  console.log(array); // output:  [ [ 101, 102, 103 ], [ 201, 202, 203 ], [ 301, 302, 303 ] ]
  console.log(array[0]); // output:  [ 101, 102, 103 ]
  console.log(array[1][0]); // output: 201
  console.log(array[2][2]); // output: 303
  
  let arr_2 = array.pop();
  console.log(array.length); // output: 2
  console.log(arr_2); // output: [ 301, 302, 303 ]
  console.log(array); // output: [ [ 101, 102, 103 ], [ 201, 202, 203 ] ]
  
  let array_num = array.push([401, 402, 403]);
  console.log(array.length); // output: 3
  console.log(array_num); // output: 3
  console.log(array); // output: [ [ 101, 102, 103 ], [ 201, 202, 203 ], [ 401, 402, 403 ] ]
  
  // 2차원 배열 반복문 예제 
  // 이중 for loop를 사용한 2차원 배열 접근 
  
  let array_1 = [
    [101, 102, 103],
    [201, 202, 203],
    [301, 302, 303],
  ];
  for (let i = 0; i < array_1.length; i++) {
    for (let j = 0; j < array_1[i].length; j++) {
      console.log(array_1[i][j]);
    }
  }
  /** output: 101 ... 303 */
  
  let fruits = [
    ["strawberry", 50],
    ["banana", 100],
    ["ice", 150],
  ];
  
  for (let i = 0; i < fruits.length; i++) {
    console.log(`fruit: ${fruits[i][0]}, amount: ${fruits[i][1]}`);
  }
  /* output
  fruit: strawberry, amount: 50
  fruit: banana, amount: 100
  fruit: ice, amount: 150
