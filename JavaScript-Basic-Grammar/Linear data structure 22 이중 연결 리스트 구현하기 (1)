* linguist-vendored
*.javascript linguist-vendored=false

/* 이중 연결 리스트 (Double Linked List)
각 노드가 데이터와 포인터를 가지며, 두 줄로 연결되어 있는 방식으로 데이터를 저장하는 자료 구조
구현 메서드 (method)
- 노드 개수 / 비어 있는지 확인 / 노드 출력: LinkedList.size(), LinkedList.isEmpty(), LinkedList.printNode()
- 순차 출력 / 역 출력: DoubleLinkedList.printNode(), DoubleLinkedList.printNodeInverse()
- 노드 추가: LinkedList.append(), LinkedList.insert()
- 노드 삭제: LinkedList.remove(), LinkedList.removeAt()
- 데이터 위치 확인: LinkedList.indexOf()
*/

// 이중 연결리스트 구현(1)

//Node(): data와 point인 next, prev를 가지고 있는 객체 
function Node(data) {
  this.data = data;
  this.next = null;
  this.prev = null;
}

// LinkedList(): head, tail과 length를 가지고 있는 객체 
function DoubleLinkedList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}

// size(): 연결 리스트 내 노드 개수 확인 
DoubleLinkedList.prototype.size = function () {
  return this.length;
};

// isEmpty(): 객체 내 노드 존재 여부 파악 
DoubleLinkedList.prototype.isEmpty = function () {
  return this.length === 0;
};

/*Test code*/ 
let dll = new DoubleLinkedList();
let node;
console.log(dll);

node = new Node(123);
dll.head = node;
dll.tail = node;
dll.length++;
console.log(dll);

node = new Node(456);
dll.tail.next = node;
node.prev = dll.tail;
dll.tail = node;
dll.length++;
console.log(dll)
